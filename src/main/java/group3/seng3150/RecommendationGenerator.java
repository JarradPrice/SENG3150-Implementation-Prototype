package group3.seng3150;

import group3.seng3150.entities.Booking;
import group3.seng3150.entities.HolidayPackages;
import group3.seng3150.entities.UserAccount;

import javax.persistence.EntityManager;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

//1st self generated by us.
//2nd is sponsored holiday packages
//3rd is holidays that come from hot location

public class RecommendationGenerator {
    private EntityManager em;
    String personalHours = "";
    int dayRange = 3;
    public RecommendationGenerator(EntityManager em){this.em =em;}


    public List<FlightPlan> getRecommendations(UserAccount user){

        if(user.getUserType()==0){
            return getPersonal(user);
        } else if(user.getUserType()==1){

            return getFamily(user);
        } else if(user.getUserType()==2){

            return getBusiness(user);
        }

        return null; //just a default
    }


    public List<FlightPlan> getPersonal(UserAccount user){
        String airport;
        if(hasBooked(user).size()>=1){

            airport = hasBooked(user).get(0).getDeparture();
            String cc = hasBooked(user).get(0).getClassCode();
            return generatePersonal(airport, user, cc);

        } else if (user.getClosestAirport()!=null){

            airport = user.getClosestAirport();
            return generatePersonal(airport, user, null);

        } else return getGeneral();

    }

    public List<FlightPlan> getFamily(UserAccount user){
        String airport;
        if(hasBooked(user).size()>=1){

            airport = hasBooked(user).get(0).getDeparture();
            return generateFamily(airport);

        } else if (user.getClosestAirport()!=null){

            airport = user.getClosestAirport();
            return generateFamily(airport);

        } else return getGeneral();

    }

    public List<FlightPlan> getBusiness(UserAccount user){
        String airport;
        if(hasBooked(user).size()>=1){

            airport = hasBooked(user).get(0).getDeparture();
            return generateBusiness(airport);

        } else if (user.getClosestAirport()!=null){

            airport = user.getClosestAirport();
            return generateBusiness(airport);

        } else return getGeneral();
    }

    public List<FlightPlan> generateFamily(String airport){

        //this will have to use flight search
        return null;
    }

    public List<FlightPlan> generatePersonal(String airport, UserAccount user, String cc){
        //personal will use best possible hours
        //this will have to use flight search
        //departure location, destination, start time, end time, number of people, class,


        //getting the dates
        Calendar c = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        c.setTime(getDate());
        Date date = getDate();
        String dateBegin = date.toString();
        c.add(Calendar.DAY_OF_MONTH, dayRange);
        String dateEnd = sdf.format(c.getTime());


        //getting departure location
        String departureLocation = airport;

        //destination is from packages
        List<HolidayPackages> packages = em.createQuery("SELECT h FROM HolidayPackages h").getResultList();

        //class code
        if(cc==null){

            cc= "ECO";
        }

        return null;
    }

    public List<FlightPlan> generateBusiness(String airport){

        //business will use business hours and cheapest pricing
        //this will have to use flight search
        return null;
    }

    public List<FlightPlan> getGeneral(){

        return null;
    }

    public List<Booking> hasBooked(UserAccount user){

        List<Booking> booking = em.createQuery("SELECT b FROM Booking b WHERE b.userID=" + user.getUserID()).getResultList();

        return booking;
    }

    public Date getDate(){
        long millis=System.currentTimeMillis();
        Date date=new java.sql.Date(millis);
        return date;
    }

}
